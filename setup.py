#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script d'installation HyperLiquid SaaS
Installation automatique de la plateforme
"""

import os
import subprocess
import sys
from pathlib import Path

def print_step(step, description):
    print(f"\nüîÑ √âtape {step}: {description}")
    print("-" * 50)

def run_command(command, description):
    print(f"Ex√©cution: {command}")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur: {e}")
        print(f"Output: {e.output}")
        return False

def create_directory_structure():
    """Cr√©e la structure de dossiers n√©cessaire"""
    directories = [
        "templates",
        "static", 
        "user_bots",
        "logs"
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"üìÅ Dossier cr√©√©: {directory}")

def create_requirements_file():
    """Cr√©e le fichier requirements.txt"""
    requirements = """
fastapi==0.104.1
uvicorn==0.24.0
sqlalchemy==2.0.23
jinja2==3.1.2
python-multipart==0.0.6
hyperliquid-python-sdk==0.1.9
python-telegram-bot==20.7
requests==2.31.0
psutil==5.9.6
    """.strip()
    
    with open("requirements.txt", "w", encoding="utf-8") as f:
        f.write(requirements)
    print("‚úÖ Fichier requirements.txt cr√©√©")

def create_env_file():
    """Cr√©e un fichier .env d'exemple"""
    env_content = """
# Configuration HyperLiquid SaaS
DATABASE_URL=sqlite:///./hyperliquid_saas.db
ADMIN_PASSWORD=admin123
SECRET_KEY=your-secret-key-here
HOST=0.0.0.0
PORT=8000

# Pour production, changez ces valeurs !
    """.strip()
    
    with open(".env.example", "w", encoding="utf-8") as f:
        f.write(env_content)
    print("‚úÖ Fichier .env.example cr√©√©")

def create_startup_script():
    """Cr√©e un script de d√©marrage"""
    startup_content = '''#!/bin/bash
# Script de demarrage HyperLiquid SaaS

echo "Demarrage HyperLiquid SaaS..."

# Verification de l'environnement virtuel
if [[ "$VIRTUAL_ENV" == "" ]]; then
    echo "Attention: Aucun environnement virtuel detecte"
    echo "Recommandation: Utilisez 'python -m venv venv && source venv/bin/activate'"
fi

# Installation des dependances si necessaire
if [ ! -d "venv" ]; then
    echo "Creation de l'environnement virtuel..."
    python -m venv venv
fi

echo "Activation de l'environnement virtuel..."
source venv/bin/activate

echo "Installation des dependances..."
pip install -r requirements.txt

echo "Initialisation de la base de donnees..."
python -c "from main import Base, engine; Base.metadata.create_all(bind=engine); print('Base de donnees initialisee')"

echo "Lancement du serveur..."
python main.py
'''
    
    with open("start.sh", "w", encoding="utf-8") as f:
        f.write(startup_content)
    
    # Rendre le script ex√©cutable
    os.chmod("start.sh", 0o755)
    print("‚úÖ Script de d√©marrage cr√©√©: start.sh")

def create_docker_files():
    """Cr√©e les fichiers Docker pour le d√©ploiement"""
    dockerfile_content = """
FROM python:3.11-slim

WORKDIR /app

# Installation des dependances systeme
RUN apt-get update && apt-get install -y \\
    gcc \\
    && rm -rf /var/lib/apt/lists/*

# Copie des fichiers requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copie du code source
COPY . .

# Creation des dossiers necessaires
RUN mkdir -p user_bots logs static templates

# Port d'exposition
EXPOSE 8000

# Commande de demarrage
CMD ["python", "main.py"]
    """.strip()
    
    with open("Dockerfile", "w", encoding="utf-8") as f:
        f.write(dockerfile_content)
    
    docker_compose_content = """
version: '3.8'

services:
  hyperliquid-saas:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - ./user_bots:/app/user_bots
      - ./logs:/app/logs
      - ./hyperliquid_saas.db:/app/hyperliquid_saas.db
    environment:
      - DATABASE_URL=sqlite:///./hyperliquid_saas.db
      - ADMIN_PASSWORD=admin123
    restart: unless-stopped
    """.strip()
    
    with open("docker-compose.yml", "w", encoding="utf-8") as f:
        f.write(docker_compose_content)
    
    print("‚úÖ Fichiers Docker cr√©√©s (Dockerfile, docker-compose.yml)")

def create_readme():
    """Cr√©e le fichier README avec les instructions"""
    readme_content = """
# HyperLiquid SaaS - Plateforme de Notifications Trading

## üöÄ Installation Rapide

### Option 1: Installation Locale

```bash
# 1. Cloner et entrer dans le dossier
cd hyperliquid-saas

# 2. Cr√©er un environnement virtuel
python -m venv venv
source venv/bin/activate  # Linux/Mac
# ou
venv\\Scripts\\activate     # Windows

# 3. Installer les d√©pendances
pip install -r requirements.txt

# 4. Lancer la plateforme
python main.py
```

### Option 2: Docker (Recommand√© pour production)

```bash
# Lancement avec Docker Compose
docker-compose up -d
```

## üåê Acc√®s

- **Interface Client**: http://localhost:8000
- **Panel Admin**: http://localhost:8000/admin
- **Mot de passe admin**: `admin123` (√† changer !)

## üìä Fonctionnalit√©s

### Pour vos clients:
‚úÖ **Inscription simple** avec configuration wallet + Telegram  
‚úÖ **Bot personnel** g√©n√©r√© automatiquement  
‚úÖ **Notifications temps r√©el** de leurs trades  
‚úÖ **Interface web** pour voir leurs statistiques  

### Pour vous (admin):
‚úÖ **Activation manuelle** des comptes apr√®s paiement  
‚úÖ **Dashboard** de gestion des utilisateurs  
‚úÖ **Monitoring** de tous les bots clients  
‚úÖ **Logs** d√©taill√©s de toutes les activit√©s  

## üîß Configuration

### Changements Recommand√©s:

1. **Mot de passe admin** dans `main.py`:
   ```python
   ADMIN_PASSWORD = "votre_mot_de_passe_securise"
   ```

2. **Base de donn√©es** (pour plus d'utilisateurs):
   - Remplacer SQLite par PostgreSQL
   - Modifier `DATABASE_URL` dans la config

3. **S√©curit√©** (production):
   - Utiliser HTTPS avec SSL
   - Configurer un reverse proxy (Nginx)
   - Chiffrer les cl√©s API des clients

## üìà Workflow Client

1. **Inscription**: Client remplit le formulaire avec ses infos
2. **Paiement**: Vous g√©rez le paiement manuellement
3. **Activation**: Vous activez le compte via le panel admin
4. **Bot automatique**: Bot personnel lanc√© automatiquement
5. **Notifications**: Client re√ßoit ses trades en temps r√©el

## üõ†Ô∏è Maintenance

### Logs des bots clients:
```bash
ls user_bots/bot_*.log
```

### Arr√™ter un bot sp√©cifique:
Via le panel admin ou manuellement avec le PID

### Backup base de donn√©es:
```bash
cp hyperliquid_saas.db backup_$(date +%Y%m%d).db
```

## üö® S√©curit√©

- Les cl√©s API des clients sont stock√©es en base (chiffrement recommand√©)
- Chaque client a son bot isol√©
- Acc√®s admin prot√©g√© par mot de passe
- Logs d√©taill√©s de toutes les activit√©s

## üìû Support

Pour vos clients, vous pouvez cr√©er une page de documentation ou FAQ.

## üîÑ Mise √† Jour

```bash
git pull origin main
pip install -r requirements.txt --upgrade
python main.py
```

---

**üéØ Votre SaaS est pr√™t !** Vos clients peuvent maintenant s'inscrire et vous g√©rez les activations.
    """.strip()
    
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print("‚úÖ Documentation cr√©√©e: README.md")

def main():
    """Installation principale"""
    print("üöÄ Installation HyperLiquid SaaS")
    print("=" * 50)
    
    # √âtape 1: Structure de dossiers
    print_step(1, "Cr√©ation de la structure de dossiers")
    create_directory_structure()
    
    # √âtape 2: Fichiers de configuration
    print_step(2, "Cr√©ation des fichiers de configuration")
    create_requirements_file()
    create_env_file()
    create_startup_script()
    
    # √âtape 3: Docker (optionnel)
    print_step(3, "Cr√©ation des fichiers Docker")
    create_docker_files()
    
    # √âtape 4: Documentation
    print_step(4, "Cr√©ation de la documentation")
    create_readme()
    
    # √âtape 5: Installation des d√©pendances
    print_step(5, "Installation des d√©pendances Python")
    install_deps = input("Installer les d√©pendances maintenant ? (y/n): ").lower().strip()
    
    if install_deps == 'y':
        if run_command("pip install -r requirements.txt", "Installation des d√©pendances"):
            print("‚úÖ Installation termin√©e avec succ√®s !")
        else:
            print("‚ö†Ô∏è Erreur lors de l'installation, installez manuellement:")
            print("pip install -r requirements.txt")
    
    # Instructions finales
    print("\n" + "=" * 60)
    print("üéâ INSTALLATION TERMIN√âE !")
    print("=" * 60)
    print("\nüìã Prochaines √©tapes:")
    print("1. Modifiez le mot de passe admin dans main.py")
    print("2. Lancez la plateforme: python main.py")
    print("3. Acc√©dez √†: http://localhost:8000")
    print("4. Admin: http://localhost:8000/admin")
    print("\nüí° Consultez le README.md pour plus d'infos")
    print("\nüöÄ Votre SaaS HyperLiquid est pr√™t !")

if __name__ == "__main__":
    main()